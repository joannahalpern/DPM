import TA.OdometerTA;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.NXTRegulatedMotor;

/**
 * Given a cartesian coordinate, this class controls the motors to drive to that
 * point.
 * 
 * @author Joanna and Harris
 * 
 */
public class Navigation{
	private Odometer odometer;
	private static final int FWD_SPEED = 250;
	private static final double WIDTH = 14.9;
	private static final double WHEEL_RADIUS = 2.075;
	private static double xCurrent = 0;
	private static double yCurrent = 0;
	private static double thetaCurrent;
	private final static NXTRegulatedMotor leftMotor = Motor.A;
	private final static NXTRegulatedMotor rightMotor = Motor.B;
	public static double dT = 0;

	public Navigation(Odometer odometer) {
		this.odometer = odometer;
		for (NXTRegulatedMotor motor : new NXTRegulatedMotor[] { leftMotor,
				rightMotor }) {
			motor.stop();
			motor.setAcceleration(1500);
		}
	}

	/**
	 * This method causes the robot to travel to the absolute field location (x,
	 * y). This method continuously call turnTo(double theta) and then set the
	 * motor speed to forward(straight). This ensures that the heading is
	 * updated until goal is reached.
	 */
	public void travelTo(double xDestination, double yDestination) {
		xCurrent = odometer.getX();
		yCurrent = odometer.getY();
		thetaCurrent = odometer.getAng();
		
		double deltaTheta;
		double deltaX = xDestination - xCurrent;
		double deltaY = yDestination - yCurrent;
		
			// this is the change in angle needed to reach the destination
			deltaTheta = calculateDeltaTheta(deltaX, deltaY); 
			if (Math.abs(deltaTheta) > 1) { // if theta has significant error
				turnBy(deltaTheta);
			}
			leftMotor.forward();
			rightMotor.forward();
			leftMotor.setAcceleration(1500);;
			rightMotor.setAcceleration(1500);
			leftMotor.setSpeed(FWD_SPEED);
			rightMotor.setSpeed(FWD_SPEED);

			// totalDistance uses pythagoras theorem to calculate the total
			// distance needed to travel
			double totalDistance = Math.sqrt((deltaX)*(deltaX) + (deltaY)*(deltaY));
			leftMotor.rotate(convertDistance(WHEEL_RADIUS, totalDistance), true);
			rightMotor.rotate(convertDistance(WHEEL_RADIUS, totalDistance), false);
			/*
			 * try { Thread.sleep(1000); } catch (InterruptedException e) { }
			 */
	}

	/**
	 * This method causes the robot to turn (on point) to the absolute heading
	 * theta. This method should turn a MINIMAL angle to it's target.
	 */
	public void turnBy(double deltaTheta) {
		int turningAngle = (int) (deltaTheta * WIDTH / 2 / WHEEL_RADIUS);
		// TODO make the turning angle minimal
		leftMotor.setSpeed(75);
		rightMotor.setSpeed(75);
		leftMotor.rotate(turningAngle, true);
		rightMotor.rotate(-turningAngle, false); // turnTo minimal angle
	}

	/**
	 * This method returns true if another thread has called travelTo() or
	 * turnTo() and the method has yet to return; false otherwise.
	 */
	// this method converts an input between 0 and 360 to an output between -180 and 180
	public double smarterTurns(double dTheta) { 
		int theta = (int) (dTheta * 100); //mod only with ints so we multiply by 100 now and divide at the bottom so we dont lose sigfigs
		theta = (theta+36000*1000)%36000; //put theta between 0 and 360
		
		if (theta > 18000) { //puts theta between -180 and 180
			theta -= 36000;
		} 
		dTheta = (double) theta;
		dTheta /= 100;
		return dTheta;
	}

	public static boolean isNavigating() {
		return false;
	}

	private double calculateDeltaTheta(double deltaX, double deltaY) {
		// -90 b/c atan2 returns an angle relative to pos-x axis
		double thetaDestination = Math.atan2(deltaY, deltaX) * 180 / Math.PI- 90;
		dT = thetaDestination - thetaCurrent;
		dT = smarterTurns(dT);
		return dT; // THIS IS IN DEGREES
	}

	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}

	/**
	 * for testing
	 */
	public void go() {
		leftMotor.forward();
		rightMotor.forward();
		leftMotor.setSpeed(FWD_SPEED);
		rightMotor.setSpeed(FWD_SPEED);
	}

	/**
	 * for testing
	 */
	public void rotateWheel() {
		leftMotor.setSpeed(30);
		leftMotor.rotateTo(30);
	}

	public static double getxCurrent() {
		return xCurrent;
	}

	public static double getyCurrent() {
		return yCurrent;
	}

	public static double getThetaCurrent() {
		return thetaCurrent;
	}
}


//
//
//public class Navigation {
//	// put your navigation code here 
//	
//	private Odometer odometer;
//	private TwoWheeledRobot robot;
//	
//	final static int FAST = 200, SLOW = 100, ACCELERATION = 1000;
//	final static double DEG_ERR = 3.0, CM_ERR = 1.0;
//	private NXTRegulatedMotor leftMotor = Motor.A;
//	private NXTRegulatedMotor rightMotor = Motor.B;
//
//
//	public Navigation(Odometer odo) {
//		this.odometer = odo;
//		this.robot = odo.getTwoWheeledRobot();
//
//		// set acceleration
//		this.leftMotor.setAcceleration(ACCELERATION);
//		this.rightMotor.setAcceleration(ACCELERATION);
//	}
//
//	/*
//	 * Functions to set the motor speeds jointly
//	 */
//	public void setSpeeds(float lSpd, float rSpd) {
//		this.leftMotor.setSpeed(lSpd);
//		this.rightMotor.setSpeed(rSpd);
//		if (lSpd < 0)
//			this.leftMotor.backward();
//		else
//			this.leftMotor.forward();
//		if (rSpd < 0)
//			this.rightMotor.backward();
//		else
//			this.rightMotor.forward();
//	}
//
//	public void setSpeeds(int lSpd, int rSpd) {
//		this.leftMotor.setSpeed(lSpd);
//		this.rightMotor.setSpeed(rSpd);
//		if (lSpd < 0)
//			this.leftMotor.backward();
//		else
//			this.leftMotor.forward();
//		if (rSpd < 0)
//			this.rightMotor.backward();
//		else
//			this.rightMotor.forward();
//	}
//
//	/*
//	 * Float the two motors jointly
//	 */
//	public void setFloat() {
//		this.leftMotor.stop();
//		this.rightMotor.stop();
//		this.leftMotor.flt(true);
//		this.rightMotor.flt(true);
//	}
//
//	/*
//	 * TravelTo function which takes as arguments the x and y position in cm Will travel to designated position, while
//	 * constantly updating it's heading
//	 */
//	public void travelTo(double x, double y) {
//		double minAng;
//		while (Math.abs(x - odometer.getX()) > CM_ERR || Math.abs(y - odometer.getY()) > CM_ERR) {
//			minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX())) * (180.0 / Math.PI);
//			if (minAng < 0)
//				minAng += 360.0;
//			this.turnTo(minAng, false);
//			this.setSpeeds(FAST, FAST);
//		}
//		this.setSpeeds(0, 0);
//	}
//
//	/*
//	 * TurnTo function which takes an angle and boolean as arguments The boolean controls whether or not to stop the
//	 * motors when the turn is completed
//	 */
//	public void turnTo(double angle, boolean stop) {
//
//		double error = angle - this.odometer.getAng();
//
//		while (Math.abs(error) > DEG_ERR) {
//
//			error = angle - this.odometer.getAng();
//
//			if (error < -180.0) {
//				this.setSpeeds(-SLOW, SLOW);
//			} else if (error < 0.0) {
//				this.setSpeeds(SLOW, -SLOW);
//			} else if (error > 180.0) {
//				this.setSpeeds(SLOW, -SLOW);
//			} else {
//				this.setSpeeds(-SLOW, SLOW);
//			}
//		}
//
//		if (stop) {
//			this.setSpeeds(0, 0);
//		}
//	}
//	
//	/*
//	 * Go forward a set distance in cm
//	 */
//	public void goForward(double distance) {
//		this.travelTo(Math.cos(Math.toRadians(this.odometer.getAng())) * distance, Math.cos(Math.toRadians(this.odometer.getAng())) * distance);
//
//	}
//}

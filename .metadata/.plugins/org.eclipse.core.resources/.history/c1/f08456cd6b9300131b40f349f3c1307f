import lejos.nxt.ColorSensor;

public class LightLocalizer {
	private Odometer odo;
	private Odometer marshmallow; // another odometer we use for easy angle measurements
	private TwoWheeledRobot robot; //unused
	private ColorSensor ls;
	private Navigation nav;
	private boolean lineSeen = false;
	private int lightVal = 99999;
	private static final int LIGHT_THRESHOLD = 350; //below which signifies a black line
	public static final double DIST_BTW_LS_AXLE = 12; //distance between color sensor and axle
	private static double[] angles = new double[4];
	
	public LightLocalizer(Odometer odo,Odometer marshmallow, ColorSensor ls, Navigation nav) {
		this.odo = odo;
		this.marshmallow = marshmallow;
		this.robot = odo.getTwoWheeledRobot();
		this.ls = ls;
		this.nav = nav;
		
		// turn on the light
		ls.setFloodlight(true);
	}
	/*
	 * This method assumes the robot has already read its bearings using ultrasonic localization.
	 */
	public void doLocalization() {
		initializeLightSensor();
		nav.turnTo(225); //first, turn so the color sensor is facing the grid intersection line
		nav.setBackward(); // move sensor-first
		while (!lineSeen){//until a line is seen (the intersection) move backwards
			lightVal = ls.getRawLightValue();
			if (lightVal < LIGHT_THRESHOLD) {
				lineSeen = true;
			}
			Navigation.go(Navigation.FWD_SPEED);
		}
		nav.moveBy(-6);//move the sensor slightly past the grid intersection
		nav.setClockwise();//set the motors to turn clockwise
		// we use another odometer (marshmallow) to take angle measurements, resetting to zero
		//each line, so we can avoid messing with the fact that Odometer sets to 0 after 359
		marshmallow.setAngle(0);
		Navigation.go(Navigation.ROTATION_SPEED); //start turning
		/*
		 * record 4 angles, and on measurement of the third angle (-x axis), set the odometer's angle 
		 * to -1/2 of the obtuse angle of the triangle formed by the first and third line measured
		 */
		for(int line = 0; line<4; line++){
			lineSeen = false;
			while (!lineSeen){
				lightVal = ls.getRawLightValue();
				if (lightVal < LIGHT_THRESHOLD) {
					lineSeen = true;
				}
			}
			angles[line] = marshmallow.getAng(); //fill in the angles array
			if (line == 2){
				odo.setAngle( -(360-(angles[1]+angles[2])/2) ); //on the third line seen, adjust the odometer angle 
			}
			marshmallow.setAngle(0); //reset the new odometer to 0 at each line
			try{Thread.sleep(1000);}catch (InterruptedException e) {} // sleep to avoid measuring the same line twice
		}
		/*
		 * Now stop turning, calculate the actual robot position, and orient to (0,0,0)
		 */
		nav.go(0); 
		calculateCurrentPosition();
		nav.travelTo(0, 0);
		nav.turnTo(0);
		return;
		
	}

	private void calculateCurrentPosition(){
		double thetaX = (360- (angles[1]+angles[2]) )*Math.PI/180;
		double thetaY = (360- (angles[2]+angles[3]) )*Math.PI/180;
		double x = -DIST_BTW_LS_AXLE* Math.cos(thetaX/2);
		double y = -DIST_BTW_LS_AXLE* Math.cos(thetaY/2);
		
		double[] pos = {x,y,99999};
		boolean[] update = {true,true,false};
		
		synchronized(Lab4.lock){
			odo.setPosition(pos, update);
		}
		
	}
	
	private void initializeLightSensor() {
		ls.setFloodlight(true);
		ls.setFloodlight(ColorSensor.Color.GREEN);		
	}
	public static double getAngle(int i){
		return angles[i];
	}
}

import lejos.nxt.Motor;
import lejos.nxt.UltrasonicSensor;

public class USLocalizer {
	public enum LocalizationType { FALLING_EDGE, RISING_EDGE, COMPROMISE };
	public static int ROTATION_SPEED = 100;

	private Odometer odo;
	private TwoWheeledRobot robot;
	private UltrasonicSensor us;
	private LocalizationType locType;
	private static double distance = 9999;
	
	public USLocalizer(Odometer odo, UltrasonicSensor us, LocalizationType locType) {
		this.odo = odo;
		this.robot = odo.getTwoWheeledRobot();
		this.us = us;
		this.locType = locType;
		
		
		// switch off the ultrasonic sensor
//		us.off();
	}
	
	public void doLocalization() {
		
		double [] pos = new double [3];
		double angleA1, angleA2, angleB1, angleB2;
		
		if (locType == LocalizationType.FALLING_EDGE) {
			
			setClockwise();
			while (isWallSeen()){
				rotate();
			}
			while (!isWallSeen()){
				rotate();
			}
			Motor.A.stop(true);
			Motor.B.stop(false);
			
			odo.getPosition(pos);
			angleA1 = pos[2];
			
			setCounterClockwise();
			while (isWallSeen()){
				rotate();
			}
			while (!isWallSeen()){
				rotate();
			}
			Motor.A.stop(true);
			Motor.B.stop(false);
			
			odo.getPosition(pos);
			angleB1 = pos[2];
			
			double currentAngle = calculateCurrentAngle(angleA1, angleB1);
			
			odo.setPosition(new double [] {0.0, 0.0, currentAngle}, new boolean [] {true, true, true});
		} 
		else if (locType == LocalizationType.RISING_EDGE){
			/*
			 * The robot should turn until it sees the wall, then look for the
			 * "rising edges:" the points where it no longer sees the wall.
			 * This is very similar to the FALLING_EDGE routine, but the robot
			 * will face toward the wall for most of it.
			 */
			
			//
			// FILL THIS IN
			//
		}
		
		else { //Compromise
			
		}
	
	}
	
	public boolean isWallSeen(){
		distance = us.getDistance();

		if (distance < 32){
			return true;
		}
		return false;
	}
	
	public static double getDistance() {
		return distance;
	}

	private int getFilteredData() {
		int distance;
		
		// do a ping
		us.ping();
		
		// wait for the ping to complete
		try { Thread.sleep(50); } catch (InterruptedException e) {}
		
		// there will be a delay here
		distance = us.getDistance();
		if (distance > 50){
			distance = 50;
		}
		return distance;
	}

	private void rotate() {
		Motor.A.setSpeed(ROTATION_SPEED);
		Motor.B.setSpeed(ROTATION_SPEED);
	}

	private double calculateCurrentAngle(double angleA, double angleB) {
		double deltaTheta;
		if (angleA > angleB){
			deltaTheta = 45 - (angleA + angleB)/2;
		}
		else{
			deltaTheta = 225 - (angleA + angleB)/2;
		}
		return deltaTheta;
	}
	
	public static void rotateNow(){
		Motor.A.forward();
		Motor.B.backward();
		while (true){
			Motor.A.setSpeed(ROTATION_SPEED);
			Motor.B.setSpeed(-ROTATION_SPEED);
		}
	}

	private void setClockwise() {
		Motor.A.forward();
		Motor.B.backward();		
	}
	private void setCounterClockwise() {
		Motor.A.backward();		
		Motor.B.forward();
	}
}

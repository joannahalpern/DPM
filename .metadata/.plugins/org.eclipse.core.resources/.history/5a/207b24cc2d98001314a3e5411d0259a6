/*
 * Lab4- Group 53 - LightPoller
 * Harris Miller - 260499543
 * Joanna Halpern - 260410826
 */

import java.util.Queue;

import lejos.nxt.ColorSensor;


public class LightPoller extends Thread{
	public static final int QUEUE_SIZE = 5;
	public static final long POLLING_PERIOD = 50;
	private ColorSensor ls;
	private LightLocalizer lsLocalizer;
	private Navigation nav;
	private double colourVal = 99999;
	private Colour colour;
	private Queue<Double> coloursQueue;
	
	

	
	public LightPoller(ColorSensor ls, LightLocalizer lsLocalizer, Navigation nav) {
		this.ls = ls;
		this.lsLocalizer = lsLocalizer;
		this.nav = nav;
		this.colour = Lab5Detection.getColour();
		
		initializeQueue();
	}
	
	public void run() {
		setFloodLight(Lab5Detection.getColour());
		while(true){//sleep every half second until myMutex (permission variable) goes to 1
			colourVal = ls.getRawLightValue();
			coloursQueue.push(colourVal);
			coloursQueue.pop();
			try { Thread.sleep(POLLING_PERIOD); } catch(Exception e){}
			}
		}

	private void setFloodLight(Colour colour) {
		ls.setFloodlight(true);
		switch (colour){
			case RED:
				ls.setFloodlight(false);
				ls.setFloodlight(ColorSensor.Color.RED);
				break;
				
			case GREEN:
				ls.setFloodlight(false);
				ls.setFloodlight(ColorSensor.Color.GREEN);
				break;
				
			case BLUE:
				ls.setFloodlight(false);
				ls.setFloodlight(ColorSensor.Color.BLUE);
				break;
			
			default:
				ls.setFloodlight(false);
				break;
		}
	}

	public double getColourVal() {
		return colourVal;
	}

	//initialize queue with 5 values
	private void initializeQueue() {
		coloursQueue = new Queue<Double>();
		for (int i = 0; i<QUEUE_SIZE; i++){
			coloursQueue.addElement(9999.9);
		}
	}
	
	/**
	 * computes mean of all the values in the coloursQueue
	 */
	public double getMean(){
		Double sum = 0.0;
		Double temp = 0.0;
		
		for (int i = 0; i<QUEUE_SIZE; i++){
			temp = ((Double) coloursQueue.pop());
			sum = sum + temp; //sum everything in queue
			coloursQueue.push(temp); //put values back in queue afterwards
		}
		double mean = (double) (sum/QUEUE_SIZE); //mean formula
		return mean;
	}
	
	//TODO not yet tested
	/**
	 * computes median of all the values in the coloursQueue
	 * by putting queue into array, sorting the array with QuickSort,
	 * then returning the middle value of that array.
	 * 
	 * If the array is an even number size, it will return the larger
	 * of the two middle numbers
	 */
	public double getMedian(){
		double array[] = new double[QUEUE_SIZE];
		Double temp;
		
		//put all colour values from the queue into an array
		for (int i = 0; i<QUEUE_SIZE; i++){
			temp = ((Double) coloursQueue.pop());
			array[i] = temp; 
			coloursQueue.push(temp); //put values back in queue afterwards
		}
		
		//sort the array
		QuickSort.quickSort(array, 0, QUEUE_SIZE);
		double median = array[(QUEUE_SIZE/2 + 1)]; //median is the middle number of the sorted array
		
		return median;
				
	}
	public static void quickSort(double[] a, int p, int r) {
		if (p < r) {
			int q = partition(a, p, r);
			quickSort(a, p, q);
			quickSort(a, q + 1, r);
		}
	}

	private static int partition(double[] a, int p, int r) {
		double x = a[p];
		int i = p - 1;
		int j = r + 1;

		while (true) {
			i++;
			while (i < r && a[i] < x)
				i++;
			j--;
			while (j > p && a[j] > x)
				j--;

			if (i < j)
				swap(a, i, j);
			else
				return j;
		}
	}

	private static void swap(double[] a, int i, int j) {
		double temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}

}
